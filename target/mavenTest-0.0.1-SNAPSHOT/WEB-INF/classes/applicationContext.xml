<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd 
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!--<bean id="propertyConfigurer"-->
		<!--class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer" >-->
		<!--<property name="locations">-->
			<!--<list>-->
				<!--<value>classpath:redis.properties</value>-->
				<!--<value>classpath:memcached.properties</value>-->
				<!--<value>classpath:c3p0.properties</value>-->
			<!--</list>-->
		<!--</property>-->
	<!--</bean>-->


	<!--<bean id="dataSource_mysql" class="com.mchange.v2.c3p0.ComboPooledDataSource"-->
		<!--depends-on="propertyConfigurer" destroy-method="close">-->
	<bean id="dataSource_mysql" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		   destroy-method="close">
		<property name="driverClass" value="com.mysql.jdbc.Driver"></property>
		<property name="jdbcUrl" value="jdbc:mysql://localhost:3306/mysql"></property>
		<property name="user" value="root"></property>
		<property name="password" value="root"></property>
		<property name="maxPoolSize" value="20"></property>
		<property name="minPoolSize" value="5"></property>
		<property name="initialPoolSize" value="5"></property>
		<property name="maxIdleTime" value="20"></property>
	</bean>

	<!-- 事务托管声明 -->
	<!--<bean id="transactionManager"-->
		<!--class="org.springframework.jdbc.datasource.DataSourceTransactionManager">-->
		<!--<property name="dataSource" ref="dataSource_mysql"></property>-->
	<!--</bean>-->

	<!-- JDBC模板 -->
	<!-- <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"> -->
	<!-- <property name="dataSource" ref="dataSource_mysql"></property> -->
	<!-- </bean> -->

	<!-- 配置MyBatis session工厂 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource_mysql" />
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath:mybatis-user.xml"></property>
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
	</bean>

	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>

	<!-- ibatis直接访问 -->
	<!-- <bean id="sqlMapClientTemplateT" class="org.springframework.orm.ibatis.SqlMapClientTemplate"> -->
	<!-- <property name="sqlMapClient" ref="sqlMapClient" /> -->
	<!-- </bean> -->

	<!-- 注册事务管理 -->
	<!--<tx:annotation-driven transaction-manager="transactionManager" />-->
	<!-- <tx:advice id="txAdvice" transaction-manager="transactionManager"> -->
	<!-- <tx:attributes> -->
	<!-- <tx:method name="get*" read-only="true"/> -->
	<!-- <tx:method name="*" propagation="REQUIRED" rollback-for="Exception"/> -->
	<!-- </tx:attributes> -->
	<!-- </tx:advice> -->

	<!-- <aop:config> -->
	<!-- <aop:pointcut expression="execution(* org.yl.service.*Impl.*(..))" 
		id="loginTransationPointcut"/> -->
	<!-- <aop:advisor advice-ref="txAdvice" pointcut-ref="loginTransationPointcut"/> -->
	<!-- </aop:config> -->

	<context:component-scan base-package="org.yl">
		<context:include-filter type="annotation"
			expression="org.aspectj.lang.annotation.Aspect" />
	</context:component-scan>
	<!-- 启动@AspectJ支持 -->
	<aop:aspectj-autoproxy />
	<bean
		class="org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator" />

	<!-- Memcached配置 -->
	<!--<bean id="memcachedPool" class="com.danga.MemCached.SockIOPool"-->
		<!--factory-method="getInstance" init-method="initialize" destroy-method="shutDown"-->
		<!--depends-on="propertyConfigurer">-->
		<!--<constructor-arg type="java.lang.String" value="dataCache" />-->
		<!--<property name="servers">-->
			<!--<list>-->
				<!--<value>${memcached.server}</value>-->
			<!--</list>-->
		<!--</property>-->
		<!--<property name="initConn">-->
			<!--<value>${memcached.initConn}</value>-->
		<!--</property>-->
		<!--<property name="minConn">-->
			<!--<value>${memcached.minConn}</value>-->
		<!--</property>-->
		<!--<property name="maxConn">-->
			<!--<value>${memcached.maxConn}</value>-->
		<!--</property>-->
		<!--<property name="maintSleep">-->
			<!--<value>${memcached.maintSleep}</value>-->
		<!--</property>-->
		<!--<property name="nagle">-->
			<!--<value>${memcached.nagle}</value>-->
		<!--</property>-->
		<!--<property name="socketTO">-->
			<!--<value>${memcached.socketTO}</value>-->
		<!--</property>-->
	<!--</bean>-->

	<!-- memcached缓存实例 -->
	<!--<bean id="memcachedProxy" class="org.yl.cache.MemcachedProxy"-->
		<!--depends-on="memcachedPool">-->
		<!--<constructor-arg type="java.lang.String" value="dataCache" />-->
	<!--</bean>-->

	<!-- 缓存工厂返回具体缓存实例对象，参数为注入的代理缓存对象 -->
	<!--<bean id="dataCache" class="org.yl.spring.factory.CacheFactory">-->
		<!--&lt;!&ndash; <constructor-arg ref="memcachedProxy" /> &ndash;&gt;-->
		<!--<constructor-arg ref="redisProxy" />-->
	<!--</bean>-->

	<!-- redis缓存实例 -->
	<!--<bean id="redisProxy" class="org.yl.cache.RedisProxy" init-method="initialize" depends-on="propertyConfigurer">-->
		<!--<property name="maxActive">-->
			<!--<value>${redis.pool.maxActive}</value>-->
		<!--</property>-->
		<!--<property name="maxIdle">-->
			<!--<value>${redis.pool.maxIdle}</value>-->
		<!--</property>-->
		<!--<property name="maxWait">-->
			<!--<value>${redis.pool.maxWait}</value>-->
		<!--</property>-->
		<!--<property name="testOnBorrow">-->
			<!--<value>${redis.pool.testOnBorrow}</value>-->
		<!--</property>-->
		<!--<property name="testOnReturn">-->
			<!--<value>${redis.pool.testOnReturn}</value>-->
		<!--</property>-->
		<!--<property name="ip">-->
			<!--<value>${redis.ip}</value>-->
		<!--</property>-->
		<!--<property name="port">-->
			<!--<value>${redis.port}</value>-->
		<!--</property>-->
		<!--<property name="expireSecond">-->
			<!--<value>${redis.expireSecond}</value>-->
		<!--</property>-->
		<!--<property name="timeout">-->
			<!--<value>${redis.timeout}</value>-->
		<!--</property>-->
	<!--</bean>-->

	<!-- <bean id="loginService" class="org.yl.service.LoginServiceImpl"> -->
	<!-- <property name="loginDao" ref="loginDao" /> -->
	<!-- </bean> -->
	<!-- <bean id="loginDao" class="org.yl.dao.LoginDaoImpl"/> -->


	<!-- <bean id="beanPostProcessor" class="org.yl.BeanPostProcessorTest"/> -->
	<!-- <import resource="classpath:/member/spring/config/applicationContext-iyhd-ycc.xml" 
		/> -->
	<!-- <import resource="classpath:/member/spring/config/applicationContext-iyhd-database.xml" 
		/> -->
	<!-- MemCacheed 定义 -->
	<!-- <bean id="memcacheFactory" class="com.yihaodian.common.cache.memcache.MemcacheProxyFactory" 
		factory-method="configure" destroy-method="close"> -->
	<!-- <constructor-arg value="file:${config_path}/memcache.xml"/> -->
	<!-- </bean> -->
	<!-- <bean id="y_dataCache" class="com.yihaodian.common.ycache.memcache.YmemcacheProxyFactory" 
		factory-method="getClient" depends-on="yMemcacheFactory"> -->
	<!-- <constructor-arg value="front-myyhd"/> -->
	<!-- </bean> -->
	<!-- MemCacheed 结束 -->

	<!-- YMemCacheed 定义 -->
	<!-- <bean id="yMemcacheFactory" class="com.yihaodian.common.ycache.memcache.YmemcacheProxyFactory" 
		factory-method="configure" destroy-method="close"> -->
	<!-- <constructor-arg value="file:${config_path}/ymemcache.xml"/> -->
	<!-- </bean> -->
	<!-- <bean id="ydataCache" class="com.yihaodian.common.ycache.memcache.YmemcacheProxyFactory" 
		factory-method="getClient" depends-on="yMemcacheFactory"> -->
	<!-- <constructor-arg value="front-myyhd"/> -->
	<!-- </bean> -->
	<!-- YMemCacheed 结束 -->

	<!-- <import resource="classpath:/global/spring/spring-global.xml"/> -->
	<!-- <import resource="classpath:/member/spring/config/applicationContext-iyhd-beans.xml"/> -->

	<!-- <bean id="busystockClientConfigurerPlugin" name="busystockClientConfigurerPlugin" 
		class="com.yihaodian.front.busystock.client.BusystockClientConfigurerPlugin"> -->
	<!-- <property name="clientAppType" value="frontend_app"/> -->
	<!-- <property name="readTimeout" value="2000"/> -->
	<!-- </bean> -->
	<!-- <import resource="classpath:centralmobile-hedwig/applicationContext-hedwig-client.xml"/> -->

	<!--sam -->
	<!-- <import resource="classpath:/sam/spring/config/applicationContext-samMy-beans.xml"/> -->
	<!-- annotation配置 -->


</beans>
